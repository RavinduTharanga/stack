"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.VMWareCloud = void 0;
const virtual_machine_1 = require("./virtual_machine");
const run_program_1 = require("../run_program");
const xmldom_1 = require("xmldom");
const xpath = require("xpath");
/**
 * Logic specific to VMWare cloud
 */
class VMWareCloud extends virtual_machine_1.VirtualMachineCloud {
    constructor(options) {
        super(options);
        this.cloudTags = this.cloudTags.concat([
            "vmware",
            "hypervisor",
            "system-services",
            "skip-agent",
            "no-image",
            "skip-system-upgrade",
            "include-licenses"
        ]);
    }
    /**
     * Parses the OVF info into a DOM.
     */
    _getOvfEnvDom() {
        const res = run_program_1.runProgram("vmtoolsd", ["--cmd", "info-get guestinfo.ovfEnv"]);
        return new xmldom_1.DOMParser().parseFromString(res);
    }
    /**
     * Get user-data passed when creating the machine.
     * It just returns the user-data content as it is.
     */
    async _getUserDataScript() {
        try {
            const doc = this._getOvfEnvDom();
            const xpathSelector = xpath.useNamespaces({ "oe": "http://schemas.dmtf.org/ovf/environment/1" });
            const b64raw = xpathSelector("string(//oe:Property[@oe:key='user-data']/@oe:value)", doc).toString();
            return new Buffer(b64raw, "base64").toString();
        }
        catch (e) {
            this.logger.error(`Unable to get user-data script: ${e}`);
            return "";
        }
    }
}
exports.VMWareCloud = VMWareCloud;
